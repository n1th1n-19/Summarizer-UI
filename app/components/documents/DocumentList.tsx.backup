'use client';
import { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from '@mui/material';
import { DataGrid, GridColDef, GridActionsCellItem } from '@mui/x-data-grid';
import {
  Eye,
  Trash2,
  Brain,
  Sparkles,
  FileText,
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { formatDistanceToNow } from 'date-fns';

interface Document {
  id: number;
  title: string;
  fileName: string;
  fileType: string;
  fileSize: number;
  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';
  summary?: string;
  createdAt: string;
  updatedAt: string;
  extractedText?: string;
}

export default function DocumentList({ refreshTrigger }: { refreshTrigger?: number }) {
  const { token } = useAuth();
  const [documents, setDocuments] = useState<Document[]>([]);
  const [loading, setLoading] = useState(false);
  const [paginationModel, setPaginationModel] = useState({
    page: 0,
    pageSize: 10,
  });
  const [rowCount, setRowCount] = useState(0);
  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; document?: Document }>({
    open: false,
  });

  const fetchDocuments = async () => {
    if (!token) return;

    setLoading(true);
    try {
      const response = await fetch(
        `http://localhost:5000/documents?page=${paginationModel.page + 1}&limit=${paginationModel.pageSize}&sortBy=createdAt&sortOrder=desc`,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      if (!response.ok) throw new Error('Failed to fetch documents');

      const data = await response.json();
      setDocuments(data.data || []);
      setRowCount(data.pagination?.total || 0);
    } catch (error) {
      console.error('Error fetching documents:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDocuments();
  }, [paginationModel, token, refreshTrigger]);

  const handleSummarize = async (documentId: number) => {
    try {
      const response = await fetch(
        `http://localhost:5000/documents/${documentId}/summarize`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      if (!response.ok) throw new Error('Failed to generate summary');

      await fetchDocuments(); // Refresh list
    } catch (error) {
      console.error('Error generating summary:', error);
    }
  };

  const handleGenerateEmbeddings = async (documentId: number) => {
    try {
      const response = await fetch(
        `http://localhost:5000/documents/${documentId}/embeddings`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      if (!response.ok) throw new Error('Failed to generate embeddings');

      await fetchDocuments(); // Refresh list
    } catch (error) {
      console.error('Error generating embeddings:', error);
    }
  };

  const handleDelete = async () => {
    if (!deleteDialog.document) return;

    try {
      const response = await fetch(
        `http://localhost:5000/documents/${deleteDialog.document.id}`,
        {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      if (!response.ok) throw new Error('Failed to delete document');

      await fetchDocuments(); // Refresh list
    } catch (error) {
      console.error('Error deleting document:', error);
    } finally {
      setDeleteDialog({ open: false });
    }
  };

  const columns: GridColDef<Document>[] = [
    {
      field: 'title',
      headerName: 'Title',
      flex: 1,
      minWidth: 200,
    },
    {
      field: 'fileType',
      headerName: 'Type',
      width: 100,
      renderCell: (params) => (
        <Chip
          label={params.value?.split('/')[1]?.toUpperCase() || 'Unknown'}
          size="small"
          variant="outlined"
        />
      ),
    },
    {
      field: 'fileSize',
      headerName: 'Size',
      width: 100,
      renderCell: (params) => `${(params.value / 1024 / 1024).toFixed(2)} MB`,
    },
    {
      field: 'status',
      headerName: 'Status',
      width: 120,
      renderCell: (params) => {
        const statusColors = {
          PENDING: 'default',
          PROCESSING: 'info',
          COMPLETED: 'success',
          FAILED: 'error',
        } as const;
        
        const color = statusColors[params.value as keyof typeof statusColors] || 'default';

        return <Chip label={params.value} size="small" color={color as 'default' | 'info' | 'success' | 'error'} />;
      },
    },
    {
      field: 'createdAt',
      headerName: 'Created',
      width: 120,
      renderCell: (params) => formatDistanceToNow(new Date(params.value), { addSuffix: true }),
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: 'Actions',
      width: 120,
      getActions: (params) => [
        <GridActionsCellItem
          key="view"
          icon={<Eye size={18} />}
          label="View"
          onClick={() => {
            // Navigate to document detail page
            window.open(`/documents/${params.row.id}`, '_blank');
          }}
        />,
        <GridActionsCellItem
          key="summarize"
          icon={<Brain size={18} />}
          label="Summarize"
          onClick={() => handleSummarize(params.row.id)}
          disabled={!params.row.extractedText}
        />,
        <GridActionsCellItem
          key="embeddings"
          icon={<Sparkles size={18} />}
          label="Generate Embeddings"
          onClick={() => handleGenerateEmbeddings(params.row.id)}
          disabled={!params.row.extractedText}
        />,
        <GridActionsCellItem
          key="delete"
          icon={<Trash2 size={18} />}
          label="Delete"
          onClick={() => setDeleteDialog({ open: true, document: params.row })}
        />,
      ],
    },
  ];

  if (loading) {
    return (
      <Box sx={{ p: 4 }}>
        <Typography variant="h5" sx={{ fontWeight: 600, color: '#1f2937', mb: 4 }}>
          Your Documents
        </Typography>
        <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))', gap: 3 }}>
          {[...Array(6)].map((_, i) => (
            <Card key={i} sx={{ border: '1px solid #e5e7eb', borderRadius: 3 }}>
              <CardContent sx={{ p: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, mb: 2 }}>
                  <Box sx={{ width: 40, height: 40, backgroundColor: '#f3f4f6', borderRadius: 2 }} />
                  <Box sx={{ flexGrow: 1 }}>
                    <Box sx={{ width: '80%', height: 16, backgroundColor: '#f3f4f6', borderRadius: 1, mb: 1 }} />
                    <Box sx={{ width: '60%', height: 12, backgroundColor: '#f3f4f6', borderRadius: 1 }} />
                  </Box>
                </Box>
                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                  <Box sx={{ width: 60, height: 20, backgroundColor: '#f3f4f6', borderRadius: 1 }} />
                  <Box sx={{ width: 80, height: 20, backgroundColor: '#f3f4f6', borderRadius: 1 }} />
                </Box>
                <Box sx={{ display: 'flex', gap: 1 }}>
                  <Box sx={{ width: 32, height: 32, backgroundColor: '#f3f4f6', borderRadius: 1 }} />
                  <Box sx={{ width: 32, height: 32, backgroundColor: '#f3f4f6', borderRadius: 1 }} />
                  <Box sx={{ width: 32, height: 32, backgroundColor: '#f3f4f6', borderRadius: 1 }} />
                </Box>
              </CardContent>
            </Card>
          ))}
        </Box>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 6, backgroundColor: '#ffffff', minHeight: '100vh' }}>
      <Box sx={{ maxWidth: '48rem', mx: 'auto' }}>
        {/* Header */}
        <Box sx={{ mb: 6 }}>
          <Typography 
            variant="h3" 
            sx={{ 
              fontWeight: 700,
              color: '#0f172a',
              mb: 2,
            }}
          >
            Your Documents
          </Typography>
          <Typography 
            variant="body1" 
            sx={{ 
              color: '#64748b',
              fontSize: '1.125rem',
            }}
          >
            Manage your uploaded research papers and documents
          </Typography>
        </Box>

        {/* Empty State */}
        {documents.length === 0 && !loading && (
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              minHeight: '400px',
              textAlign: 'center',
            }}
          >
            <Typography 
              variant="h4" 
              sx={{ 
                fontWeight: 600,
                color: '#0f172a',
                mb: 2,
              }}
            >
              No documents yet
            </Typography>
            <Typography 
              variant="body1" 
              sx={{ 
                color: '#64748b',
                mb: 4,
                fontSize: '1.125rem',
                maxWidth: '28rem',
              }}
            >
              Upload your first document to start analyzing and chatting with AI about your content.
            </Typography>
            <Button
              variant="contained"
              size="large"
              startIcon={<Eye size={20} />}
              onClick={() => window.location.href = '/dashboard/upload'}
              sx={{
                backgroundColor: '#ab6800',
                color: '#ffffff',
                fontWeight: 600,
                py: 2,
                px: 4,
                '&:hover': {
                  backgroundColor: '#92400e',
                },
              }}
            >
              Upload Document
            </Button>
          </Box>
        )}

        {/* Loading State */}
        {loading && (
          <Box>
            {[...Array(3)].map((_, i) => (
              <Box
                key={i}
                sx={{
                  p: 4,
                  mb: 3,
                  border: '1px solid #e2e8f0',
                  borderRadius: 2,
                  backgroundColor: '#ffffff',
                }}
              >
                <Box sx={{ display: 'flex', gap: 3, mb: 3 }}>
                  <Box sx={{ width: 48, height: 48, backgroundColor: '#f1f5f9', borderRadius: 1 }} />
                  <Box sx={{ flexGrow: 1 }}>
                    <Box sx={{ width: '70%', height: 20, backgroundColor: '#f1f5f9', borderRadius: 1, mb: 2 }} />
                    <Box sx={{ width: '50%', height: 16, backgroundColor: '#f1f5f9', borderRadius: 1 }} />
                  </Box>
                </Box>
                <Box sx={{ display: 'flex', gap: 2 }}>
                  <Box sx={{ width: 60, height: 24, backgroundColor: '#f1f5f9', borderRadius: 1 }} />
                  <Box sx={{ width: 80, height: 24, backgroundColor: '#f1f5f9', borderRadius: 1 }} />
                </Box>
              </Box>
            ))}
          </Box>
        )}

        {/* Documents List */}
        {documents.length > 0 && !loading && (
          <Box>
            {documents.map((document) => (
              <Box
                key={document.id}
                sx={{
                  p: 4,
                  mb: 3,
                  border: '1px solid #e2e8f0',
                  borderRadius: 2,
                  backgroundColor: '#ffffff',
                  transition: 'all 0.2s ease-in-out',
                  '&:hover': {
                    borderColor: '#ab6800',
                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
                  },
                }}
              >
                {/* Document Header */}
                <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 3, mb: 3 }}>
                  <Box
                    sx={{
                      width: 48,
                      height: 48,
                      borderRadius: 1,
                      backgroundColor: '#ab6800',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      flexShrink: 0,
                    }}
                  >
                    <FileText size={24} color="#ffffff" />
                  </Box>
                  <Box sx={{ flexGrow: 1, minWidth: 0 }}>
                    <Typography 
                      variant="h6" 
                      sx={{ 
                        fontWeight: 600,
                        color: '#0f172a',
                        fontSize: '1.25rem',
                        mb: 1,
                      }}
                    >
                      {document.title}
                    </Typography>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        color: '#64748b',
                        fontSize: '0.875rem',
                        mb: 2,
                      }}
                    >
                      {document.fileName} • {(document.fileSize / 1024 / 1024).toFixed(2)} MB • {formatDistanceToNow(new Date(document.createdAt), { addSuffix: true })}
                    </Typography>
                    
                    {/* Status */}
                    <Typography
                      variant="body2"
                      sx={{
                        display: 'inline-block',
                        px: 2,
                        py: 0.5,
                        borderRadius: 1,
                        fontSize: '0.75rem',
                        fontWeight: 500,
                        backgroundColor: 
                          document.status === 'COMPLETED' ? '#dcfce7' :
                          document.status === 'PROCESSING' ? '#dbeafe' :
                          document.status === 'FAILED' ? '#fee2e2' : '#f1f5f9',
                        color: 
                          document.status === 'COMPLETED' ? '#166534' :
                          document.status === 'PROCESSING' ? '#1e40af' :
                          document.status === 'FAILED' ? '#dc2626' : '#64748b',
                      }}
                    >
                      {document.status}
                    </Typography>
                  </Box>
                </Box>

                {/* Summary */}
                {document.summary && (
                  <Box sx={{ mb: 3 }}>
                    <Typography 
                      variant="body1" 
                      sx={{ 
                        color: '#374151',
                        lineHeight: 1.6,
                        fontSize: '0.95rem',
                      }}
                    >
                      {document.summary}
                    </Typography>
                  </Box>
                )}

                {/* Actions */}
                <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<Brain size={16} />}
                    onClick={() => handleSummarize(document.id)}
                    disabled={!document.extractedText || document.status !== 'COMPLETED'}
                    sx={{
                      borderColor: '#e2e8f0',
                      color: '#64748b',
                      '&:hover': {
                        borderColor: '#ab6800',
                        backgroundColor: '#fef3c7',
                        color: '#ab6800',
                      },
                      '&:disabled': {
                        borderColor: '#e2e8f0',
                        color: '#cbd5e1',
                      },
                    }}
                  >
                    Summarize
                  </Button>
                  
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={<Sparkles size={16} />}
                    onClick={() => handleGenerateEmbeddings(document.id)}
                    disabled={!document.extractedText || document.status !== 'COMPLETED'}
                    sx={{
                      borderColor: '#e2e8f0',
                      color: '#64748b',
                      '&:hover': {
                        borderColor: '#ab6800',
                        backgroundColor: '#fef3c7',
                        color: '#ab6800',
                      },
                      '&:disabled': {
                        borderColor: '#e2e8f0',
                        color: '#cbd5e1',
                      },
                    }}
                  >
                    Generate Embeddings
                  </Button>

                  <Button
                    variant="text"
                    size="small"
                    startIcon={<Trash2 size={16} />}
                    onClick={() => setDeleteDialog({ open: true, document })}
                    sx={{
                      color: '#ef4444',
                      '&:hover': {
                        backgroundColor: '#fef2f2',
                      },
                    }}
                  >
                    Delete
                  </Button>
                </Box>
              </Box>
            ))}
          </Box>
        )}

        {/* Delete Confirmation Dialog */}
        <Dialog
          open={deleteDialog.open}
          onClose={() => setDeleteDialog({ open: false })}
          PaperProps={{
            sx: {
              borderRadius: 2,
              border: '1px solid #e2e8f0',
              maxWidth: '28rem',
            }
          }}
        >
          <DialogTitle sx={{ color: '#0f172a', fontWeight: 600, fontSize: '1.25rem' }}>
            Delete Document
          </DialogTitle>
          <DialogContent>
            <DialogContentText sx={{ color: '#64748b', fontSize: '1rem' }}>
              Are you sure you want to delete &quot;{deleteDialog.document?.title}&quot;? 
              This action cannot be undone.
            </DialogContentText>
          </DialogContent>
          <DialogActions sx={{ p: 3, gap: 2 }}>
            <Button 
              variant="outlined"
              onClick={() => setDeleteDialog({ open: false })}
              sx={{
                borderColor: '#e2e8f0',
                color: '#64748b',
                '&:hover': {
                  backgroundColor: '#f8fafc',
                  borderColor: '#cbd5e1',
                },
              }}
            >
              Cancel
            </Button>
            <Button 
              variant="contained"
              onClick={handleDelete} 
              sx={{
                backgroundColor: '#ef4444',
                '&:hover': {
                  backgroundColor: '#dc2626',
                },
              }}
            >
              Delete Document
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
}